const express = require('express');
const router = express.Router();
const { getProducts, createProduct, deleteProduct, updateProduct, getProductsByCategory, getProductById} = require('../database/products');
const { upload, uploadFileToGoogleDrive, deleteFileFromGoogleDrive } = require('../multerConfig');
const fs = require('fs');
const path = require('path');
const authProductRouter = express.Router();

// Añadir la función deleteImage
function deleteImage(imagePath) {
  fs.unlink(imagePath, (error) => {
    if (error) {
      console.error('Error al eliminar la imagen:', error);
    } else {
      console.log('Imagen eliminada con éxito:', imagePath);
    }
  });
}

// Ruta para renderizar la página 'products.ejs'
router.get('/', async (req, res) => {
  const categoryId = req.query.category;

  try {
    
    res.render('products', { categoryId });
    

  } catch (error) {
    console.error('Error al renderizar la página de productos:', error);
    res.status(500).send('Error al renderizar la página de productos');
  }
});

// Ruta para renderizar la página 'products_auth.ejs'
authProductRouter.get('/', async (req, res) => {
  const username = req.cookies.username || '';
  const categoryId = req.query.category;

  try {
    res.render('products_auth', { username, categoryId });
  } catch (error) {
    console.error('Error al renderizar la página de productos_auth:', error);
    res.status(500).send('Error al renderizar la página de productos_auth');
  }
});

// Ruta para obtener todos los productos
router.get('/getProducts', async (req, res) => {
  try {
    const products = await getProducts();
    res.status(200).json(products);
  } catch (error) {
    console.error('Error al obtener los productos:', error);
    res.status(500).send('Error al obtener los productos');
  }
});

// Ruta para obtener un producto por ID
router.get('/getProductById/:id', async (req, res) => {
  const { id } = req.params;

  try {
    const product = await getProductById(id);
    res.status(200).json(product);
  } catch (error) {
    console.error('Error al obtener el producto por ID:', error);
    res.status(500).send('Error al obtener el producto por ID');
  }
});



router.get('/products/:categoryName', async (req, res) => {
  const { categoryName } = req.params;

  try {
    const decodedCategoryName = decodeURIComponent(categoryName);
    const products = await getProductsByCategoryByName(decodedCategoryName);
    res.render('products', { products });
  } catch (error) {
    console.error('Error al obtener los productos por nombre de categoría:', error);
    res.status(500).send('Error al obtener los productos por nombre de categoría');
  }
});




// Ruta para eliminar un producto
router.delete('/delete/:id', async (req, res) => {
  const { id } = req.params;

  try {
      const product = await getProductById(id);

      // Eliminar las imágenes de Google Drive
      for (let i = 1; i <= 5; i++) {
          const imageKey = `image${i}`;
          if (product[imageKey]) {
              await deleteFileFromGoogleDrive(product[imageKey]);
          }
      }

      // Eliminar el video de Google Drive
      if (product.video_link) {
          await deleteFileFromGoogleDrive(product.video_link);
      }

      // Eliminar el producto de la base de datos
      await deleteProduct(id);
      res.status(200).send('Producto eliminado con éxito');
  } catch (error) {
      console.error('Error al eliminar el producto:', error);
      res.status(500).send('Error al eliminar el producto');
  }
});


// Ruta para actualizar un producto
router.put('/update/:id', upload.fields([{ name: 'images[]', maxCount: 5 }, { name: 'video', maxCount: 1 }]), async (req, res) => {
  const { id } = req.params;
  const { product_name, product_description, price, purchase_link, category_id } = req.body;

  try {
      const oldProduct = await getProductById(id);

      const images = req.files['images[]'] || [];
      const video = req.files['video'] ? req.files['video'][0] : null;

      // Subir nuevas imágenes y eliminar las antiguas
      const newImageIds = [];
      for (let i = 0; i < images.length; i++) {
          const newImageId = await uploadFileToGoogleDrive(images[i], false);
          newImageIds.push(newImageId);

          // Eliminar imagen antigua si existe
          const oldImageId = oldProduct[`image${i + 1}`];
          if (oldImageId) {
              await deleteFileFromGoogleDrive(oldImageId);
          }
      }

      // Subir nuevo video y eliminar el antiguo
      let newVideoId = oldProduct.video_link;
      if (video) {
          newVideoId = await uploadFileToGoogleDrive(video, true);
          if (oldProduct.video_link) {
              await deleteFileFromGoogleDrive(oldProduct.video_link);
          }
      }

      // Actualizar el producto en la base de datos
      await updateProduct(
          id,
          product_name,
          product_description,
          newImageIds[0] || oldProduct.image1,
          newImageIds[1] || oldProduct.image2,
          newImageIds[2] || oldProduct.image3,
          newImageIds[3] || oldProduct.image4,
          newImageIds[4] || oldProduct.image5,
          newVideoId,
          price,
          purchase_link,
          category_id
      );

      res.status(200).send('Producto actualizado con éxito');
  } catch (error) {
      console.error('Error al actualizar el producto:', error);
      res.status(500).send('Error al actualizar el producto');
  }
});



// Ruta para obtener todos los productos por categoría
router.get('/getProductsByCategory/:categoryId', async (req, res) => {
    const { categoryId } = req.params;
  
    try {
      const products = await getProductsByCategory(categoryId);
      res.status(200).json(products);
    } catch (error) {
      console.error('Error al obtener los productos por categoría:', error);
      res.status(500).send('Error al obtener los productos por categoría');
    }
  });

// Ruta para crear un nuevo producto (elimina la anterior)
router.post('/create', upload.fields([{ name: 'images[]', maxCount: 25 }, { name: 'video', maxCount: 1 }]), async (req, res) => {
  const { product_name, product_description, price, purchase_link, category_id } = req.body;
  const images = req.files['images[]'] || [];
  const video = req.files['video'] ? req.files['video'][0] : null;

  try {
      // Subir imágenes a Google Drive y obtener sus IDs
      const imageIds = await Promise.all(images.map(image => uploadFileToGoogleDrive(image, false))); // false indica que no es un video

      // Subir video a Google Drive y obtener su ID
      const videoId = video ? await uploadFileToGoogleDrive(video, true) : null; // true indica que es un video

      // Crear un nuevo producto con los IDs de Google Drive
      const newProduct = await createProduct(
          product_name,
          product_description,
          imageIds.length > 0 ? imageIds[0] : null,
          imageIds.length > 1 ? imageIds[1] : null,
          imageIds.length > 2 ? imageIds[2] : null,
          imageIds.length > 3 ? imageIds[3] : null,
          imageIds.length > 4 ? imageIds[4] : null,
          videoId,
          price,
          purchase_link,
          category_id
      );

      res.status(200).json(newProduct);
  } catch (error) {
      console.error('Error al crear el producto:', error);
      res.status(500).send('Error al crear el producto');
  }
});

  

module.exports = { productRouter: router, authProductRouter }; // Modifica esta línea


